// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: serverRpcUser.proto

package pb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RpcServerService service

func NewRpcServerServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RpcServerService service

type RpcServerService interface {
	GetUserById(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*GetUserResponse, error)
}

type rpcServerService struct {
	c    client.Client
	name string
}

func NewRpcServerService(name string, c client.Client) RpcServerService {
	return &rpcServerService{
		c:    c,
		name: name,
	}
}

func (c *rpcServerService) GetUserById(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*GetUserResponse, error) {
	req := c.c.NewRequest(c.name, "RpcServerService.GetUserById", in)
	out := new(GetUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RpcServerService service

type RpcServerServiceHandler interface {
	GetUserById(context.Context, *GetUserRequest, *GetUserResponse) error
}

func RegisterRpcServerServiceHandler(s server.Server, hdlr RpcServerServiceHandler, opts ...server.HandlerOption) error {
	type rpcServerService interface {
		GetUserById(ctx context.Context, in *GetUserRequest, out *GetUserResponse) error
	}
	type RpcServerService struct {
		rpcServerService
	}
	h := &rpcServerServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RpcServerService{h}, opts...))
}

type rpcServerServiceHandler struct {
	RpcServerServiceHandler
}

func (h *rpcServerServiceHandler) GetUserById(ctx context.Context, in *GetUserRequest, out *GetUserResponse) error {
	return h.RpcServerServiceHandler.GetUserById(ctx, in, out)
}
